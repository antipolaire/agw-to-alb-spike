---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Spike for using ALB with OIDC authentication


Globals:

  Function:
    MemorySize: 128
    Timeout: 300
    Tracing: Active
    Handler: bootstrap
    Runtime: provided.al2
    Architectures:
      - x86_64

  Api:
    TracingEnabled: true

Parameters:

  OIDCServer:
    Type: String
    Default: lemur-17.cloud-iam.com
    Description: >
      The Keycloak server used to authenticate users against the Keycloak.

  OIDCRealm:
    Type: String
    Default: idp-test
    #    Default: kums

  KeycloakClientId:
    Type: String
    Default: example-client
    Description: >
      Client ID used to authenticate users against the Keycloak.

  KeycloakClientSecret:
    Type: String
    Default: PUT_YOUR_SECRET_HERE
    Description: >
      Client Secret used to authenticate users against the Keycloak.

  ApplicationUrl:
    Type: String
    Description: >
      URL of the application (name of public hosted zone prepared in Route53).
    Default: YOUR_DOMAIN_NAME

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: >
      ID of the public hosted zone prepared in Route53 (see zone details).
    Default: YOUR_HOSTED_ZONE_ID

Resources:

  # Route53 A referencing the ALB
  ApplicationUrlRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref ApplicationUrl
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  # Example Frontend Lambda function
  FrontendLambdaFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: Frontend Lambda function
      CodeUri: ./frontend_lambda/function.zip
      Timeout: 60
      VpcConfig:
        SubnetIds: ['subnet-0123456789abcdef0','subnet-0123456789abcdef1','subnet-0123456789abcdef2']
        SecurityGroupIds: ['sg-0123456789abcdef0','sg-0123456789abcdef1', 'sg-0123456789abcdef2']

  APILambdaFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: API Lambda function
      CodeUri: ./api_lambda/function.zip
      Timeout: 60
      VpcConfig:
        SubnetIds: ['subnet-0123456789abcdef0','subnet-0123456789abcdef1','subnet-0123456789abcdef2']
        SecurityGroupIds: ['sg-0123456789abcdef0','sg-0123456789abcdef1', 'sg-0123456789abcdef2']


  ImageLambdaFunction :
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: Image Lambda function
      CodeUri: ./image_lambda/function.zip
      Timeout: 60
      VpcConfig:
        SubnetIds: ['subnet-0123456789abcdef0','subnet-0123456789abcdef1','subnet-0123456789abcdef2']
        SecurityGroupIds: ['sg-0123456789abcdef0','sg-0123456789abcdef1', 'sg-0123456789abcdef2']


  # Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Application Load Balancer"
      VpcId: 'vpc-0123456789abcdef0'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443     #
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "ALB-SecurityGroup"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: ['subnet-0123456789abcdef0','subnet-0123456789abcdef1','subnet-0123456789abcdef2']
      Tags:
        - Key: name
          Value: !Ref AWS::StackName

  ALBFrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub frontend-lambda-target-group
      TargetType: lambda
      Targets:
        - Id: !GetAtt FrontendLambdaFunction.Arn
      Tags:
        - Key: Component
          Value: Backend
        - Key: Name
          Value: frontend-lambda-target-group

  ALBAPILambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: api-lambda-target-group
      TargetType: lambda
      Targets:
        - Id: !GetAtt APILambdaFunction.Arn
      Tags:
        - Key: Component
          Value: Backend
        - Key: Name
          Value: api-lambda-target-group

  ALBImageRetrievalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: image-lambda-target-group
      TargetType: lambda
      Targets:
        - Id: !GetAtt ImageLambdaFunction.Arn
      Tags:
        - Key: Component
          Value: Backend
        - Key: Name
          Value: image-lambda-target-group

  ALBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301

  ALBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBFrontendTargetGroup

  # API Path Rule
  ALBAPILambdaListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            Issuer: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}
            AuthorizationEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/auth
            TokenEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/token
            UserInfoEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/userinfo
            ClientId: !Sub ${KeycloakClientId}
            ClientSecret: !Sub ${KeycloakClientSecret}
            Scope: "openid"
            SessionCookieName: "KeycloakSession"
            SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref ALBAPILambdaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ["/api/*"]
      ListenerArn: !Ref ALBHttpsListener
      Priority: 10

  # Image Path Rule
  ALBImageRetrievalListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            Issuer: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}
            AuthorizationEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/auth
            TokenEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/token
            UserInfoEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/userinfo
            ClientId: !Sub ${KeycloakClientId}
            ClientSecret: !Sub ${KeycloakClientSecret}
            Scope: "openid"
            SessionCookieName: "KeycloakSession"
            SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref ALBImageRetrievalTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ["/image/*"]
      ListenerArn: !Ref ALBHttpsListener
      Priority: 20

  # Catch-all Rule
  ALBCatchAllListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            Issuer: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}
            AuthorizationEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/auth
            TokenEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/token
            UserInfoEndpoint: !Sub https://${OIDCServer}/auth/realms/${OIDCRealm}/protocol/openid-connect/userinfo
            ClientId: !Sub ${KeycloakClientId}
            ClientSecret: !Sub ${KeycloakClientSecret}
            Scope: "openid"
            SessionCookieName: "KeycloakSession"
            SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref ALBFrontendTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ["/*"]
      ListenerArn: !Ref ALBHttpsListener
      Priority: 30

  # Purpose: Allow the ALB to invoke frontend Lambda function
  ALBInvokeFrontendLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FrontendLambdaFunction
      Principal: elasticloadbalancing.amazonaws.com

  # Purpose: Allow the ALB to invoke API Lambda function
  ALBInvokeAPILambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref APILambdaFunction
      Principal: elasticloadbalancing.amazonaws.com

  # Purpose: Allow the ALB to invoke API Lambda function
  ALBInvokeImageLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ImageLambdaFunction
      Principal: elasticloadbalancing.amazonaws.com

  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApplicationUrl
      DomainValidationOptions:
        - DomainName: !Ref ApplicationUrl
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
      Tags:
        - Key: Component
          Value: Frontend
